// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generate > should generate CJS code 1`] = `
""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XataClient = void 0;
const client_1 = require("@xata.io/client");
/** @typedef { import('./types').SchemaTables } SchemaTables */
/** @type { SchemaTables } */
const tables = [
  {
    name: "users",
    primaryKey: ["xata_id"],
    columns: [{ name: "name", type: "string" }],
  },
];
/** @type { import('@xata.io/client').ClientConstructor<{}> } */
const DatabaseClient = (0, client_1.buildClient)();
/** @typedef { import('./types').DatabaseSchema } DatabaseSchema */
/** @extends DatabaseClient<DatabaseSchema> */
class XataClient extends DatabaseClient {
  constructor(options) {
    super(
      {
        apiKey: process.env.XATA_API_KEY,
        databaseURL: process.env.XATA_DATABASE_URL,
        // Use deploy preview branch if available, otherwise use branch from environment
        branch:
          (0, client_1.getDeployPreviewBranch)(process.env) ??
          process.env.XATA_BRANCH ??
          "main",
        ...options,
      },
      tables
    );
  }
}
exports.XataClient = XataClient;
"
`;

exports[`generate > should generate Deno code 1`] = `
"import {
  buildClient,
  getDeployPreviewBranch,
} from "npm:@xata.io/client@latest";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "npm:@xata.io/client@latest";

const tables = [
  {
    name: "users",
    primaryKey: ["xata_id"],
    columns: [{ name: "name", type: "string" }],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  users: UsersRecord;
};

const DatabaseClient = buildClient();

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super(
      {
        apiKey: Deno.env.get("XATA_API_KEY"),
        databaseURL: Deno.env.get("XATA_DATABASE_URL"),
        // Use deploy preview branch if available, otherwise use branch from environment
        branch:
          getDeployPreviewBranch(Deno.env.get) ??
          Deno.env.get("XATA_BRANCH") ??
          "main",
        ...options,
      },
      tables
    );
  }
}
"
`;

exports[`generate > should ignore CJS for TS code 1`] = `
"import { buildClient, getDeployPreviewBranch } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "users",
    primaryKey: ["xata_id"],
    columns: [{ name: "name", type: "string" }],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  users: UsersRecord;
};

const DatabaseClient = buildClient();

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super(
      {
        apiKey: process.env.XATA_API_KEY,
        databaseURL: process.env.XATA_DATABASE_URL,
        // Use deploy preview branch if available, otherwise use branch from environment
        branch:
          getDeployPreviewBranch(process.env) ??
          process.env.XATA_BRANCH ??
          "main",
        ...options,
      },
      tables
    );
  }
}
"
`;

exports[`generate > should inject branch if passed 1`] = `
"import { buildClient, getDeployPreviewBranch } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "users",
    primaryKey: ["xata_id"],
    columns: [{ name: "name", type: "string" }],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  users: UsersRecord;
};

const DatabaseClient = buildClient();

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super(
      {
        apiKey: process.env.XATA_API_KEY,
        databaseURL: process.env.XATA_DATABASE_URL,
        // Use deploy preview branch if available, otherwise use branch from environment
        branch:
          getDeployPreviewBranch(process.env) ??
          process.env.XATA_BRANCH ??
          "main",
        ...options,
      },
      tables
    );
  }
}
"
`;

exports[`generate > should respect case naming 1`] = `
"import { buildClient, getDeployPreviewBranch } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "teams_Like",
    primaryKey: ["xata_id"],
    columns: [
      { name: "name-test", type: "string" },
      { name: "labels_Test", type: "multiple" },
      { name: "ownerFoo", type: "link", link: { table: "users-foo" } },
    ],
  },
  {
    name: "users-foo",
    primaryKey: ["xata_id"],
    columns: [
      { name: "email-random", type: "email" },
      { name: "full_name", type: "string" },
      { name: "teamLike", type: "link", link: { table: "teams_Like" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type TeamsLike = InferredTypes["teams_Like"];
export type TeamsLikeRecord = TeamsLike & XataRecord;

export type UsersFoo = InferredTypes["users-foo"];
export type UsersFooRecord = UsersFoo & XataRecord;

export type DatabaseSchema = {
  teams_Like: TeamsLikeRecord;
  "users-foo": UsersFooRecord;
};

const DatabaseClient = buildClient();

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super(
      {
        apiKey: process.env.XATA_API_KEY,
        databaseURL: process.env.XATA_DATABASE_URL,
        // Use deploy preview branch if available, otherwise use branch from environment
        branch:
          getDeployPreviewBranch(process.env) ??
          process.env.XATA_BRANCH ??
          "main",
        ...options,
      },
      tables
    );
  }
}
"
`;

exports[`generate > should respect numbers in names 1`] = `
"import { buildClient, getDeployPreviewBranch } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "1teams-case",
    primaryKey: ["xata_id"],
    columns: [
      { name: "2nameCase", type: "string" },
      { name: "3Labels", type: "multiple" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type $1teamsCase = InferredTypes["1teams-case"];
export type $1teamsCaseRecord = $1teamsCase & XataRecord;

export type DatabaseSchema = {
  "1teams-case": $1teamsCaseRecord;
};

const DatabaseClient = buildClient();

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super(
      {
        apiKey: process.env.XATA_API_KEY,
        databaseURL: process.env.XATA_DATABASE_URL,
        // Use deploy preview branch if available, otherwise use branch from environment
        branch:
          getDeployPreviewBranch(process.env) ??
          process.env.XATA_BRANCH ??
          "main",
        ...options,
      },
      tables
    );
  }
}
"
`;

exports[`generate > should respect numbers in names 2`] = `
"import { buildClient, getDeployPreviewBranch } from "@xata.io/client";
const tables = [
  {
    name: "1teams-case",
    primaryKey: ["xata_id"],
    columns: [
      { name: "2nameCase", type: "string" },
      { name: "3Labels", type: "multiple" },
    ],
  },
];
const DatabaseClient = buildClient();
export class XataClient extends DatabaseClient {
  constructor(options) {
    super(
      {
        apiKey: process.env.XATA_API_KEY,
        databaseURL: process.env.XATA_DATABASE_URL,
        // Use deploy preview branch if available, otherwise use branch from environment
        branch:
          getDeployPreviewBranch(process.env) ??
          process.env.XATA_BRANCH ??
          "main",
        ...options,
      },
      tables
    );
  }
}
"
`;

exports[`generate > should respect numbers in names 3`] = `
"import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";
declare const tables: readonly [
  {
    readonly name: "1teams-case";
    readonly primaryKey: readonly ["xata_id"];
    readonly columns: readonly [
      {
        readonly name: "2nameCase";
        readonly type: "string";
      },
      {
        readonly name: "3Labels";
        readonly type: "multiple";
      }
    ];
  }
];
export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;
export type $1teamsCase = InferredTypes["1teams-case"];
export type $1teamsCaseRecord = $1teamsCase & XataRecord;
export type DatabaseSchema = {
  "1teams-case": $1teamsCaseRecord;
};
declare const DatabaseClient: any;
export declare class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions);
}
export {};
"
`;
