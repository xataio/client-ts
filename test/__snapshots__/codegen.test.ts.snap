// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codegen should generate correct JavaScript 1`] = `
"/** @typedef { import('@xata.io/client').Repository } Repository */
import { BaseClient, RestRespositoryFactory } from \\"@xata.io/client\\";
/**
 * @typedef {Object} Author
 * @property {string} id
 * @property {Object} xata
 * @property {() => Promise<Author>} read
 * @property {() => Promise<Author>} update
 * @property {() => Promise<void>} delete
 * @property {string=} name
 * @property {string=} email
 * @property {string=} photoUrl
 * @property {string=} bio
 * @property {string=} title
 
 */
/**
 * @typedef {Object} Post
 * @property {string} id
 * @property {Object} xata
 * @property {() => Promise<Post>} read
 * @property {() => Promise<Post>} update
 * @property {() => Promise<void>} delete
 * @property {string=} title
 * @property {string=} summary
 * @property {string=} content
 * @property {string[]=} tags
 * @property {number=} likes
 * @property {AuthorRecord=} author
 * @property {string=} date
 * @property {string=} slug
 * @property {boolean=} published
 
 */
/**
 * @typedef {Object} Person
 * @property {string} id
 * @property {Object} xata
 * @property {() => Promise<Person>} read
 * @property {() => Promise<Person>} update
 * @property {() => Promise<void>} delete
 * @property {string=} slug
 * @property {string=} name
 * @property {string=} title
 * @property {string=} photoUrl
 
 */
const links = { authors: [], posts: [[\\"author\\", \\"authors\\"]], people: [] };
export class XataClient extends BaseClient {
  constructor(options) {
    super(
      {
        databaseURL: \\"https://my-workspace-gfdd12.xata.sh/db/hello-xata\\",
        ...options,
      },
      links
    );
    const factory = options.repositoryFactory || new RestRespositoryFactory();
    /** @type {{ \\"authors\\": Repository; \\"posts\\": Repository; \\"people\\": Repository }} */
    this.db = {
      authors: factory.createRepository(this, \\"authors\\"),
      posts: factory.createRepository(this, \\"posts\\"),
      people: factory.createRepository(this, \\"people\\"),
    };
  }
}
"
`;

exports[`codegen should generate correct TypeScript 1`] = `
"import {
  BaseClient,
  Repository,
  RestRespositoryFactory,
  XataClientOptions,
  XataRecord,
} from \\"@xata.io/client\\";

export interface Author {
  name?: string | null;
  email?: string | null;
  photoUrl?: string | null;
  bio?: string | null;
  title?: string | null;
}

export type AuthorRecord = Author & XataRecord;

export interface Post {
  title?: string | null;
  summary?: string | null;
  content?: string | null;
  tags?: string[] | null;
  likes?: number | null;
  author?: AuthorRecord | null;
  date?: string | null;
  slug?: string | null;
  published?: boolean | null;
}

export type PostRecord = Post & XataRecord;

export interface Person {
  slug?: string | null;
  name?: string | null;
  title?: string | null;
  photoUrl?: string | null;
}

export type PersonRecord = Person & XataRecord;

const links = { authors: [], posts: [[\\"author\\", \\"authors\\"]], people: [] };

export class XataClient extends BaseClient<{
  authors: Repository<Author>;
  posts: Repository<Post>;
  people: Repository<Person>;
}> {
  constructor(options: XataClientOptions) {
    super(
      {
        databaseURL: \\"https://my-workspace-gfdd12.xata.sh/db/hello-xata\\",
        ...options,
      },
      links
    );

    const factory = options.repositoryFactory || new RestRespositoryFactory();

    this.db = {
      authors: factory.createRepository(this, \\"authors\\"),
      posts: factory.createRepository(this, \\"posts\\"),
      people: factory.createRepository(this, \\"people\\"),
    };
  }
}
"
`;
