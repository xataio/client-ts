// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generate > should generate CJS code 1`] = `
"\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.getXataClient = exports.XataClient = void 0;
// Generated by Xata Codegen CODEGEN_VERSION. Please do not edit.
const client_1 = require(\\"@xata.io/client\\");
/** @typedef { import('./types').SchemaTables } SchemaTables */
/** @type { SchemaTables } */
const tables = [{ name: \\"users\\", columns: [{ name: \\"name\\", type: \\"string\\" }] }];
/** @type { import('../../client/src').ClientConstructor<{}> } */
const DatabaseClient = (0, client_1.buildClient)();
const defaultOptions = {
  databaseURL: \\"https://workspace-1234.xata.sh/db/dbname\\",
  branch: \\"feature-branch\\",
};
/** @typedef { import('./types').DatabaseSchema } DatabaseSchema */
/** @extends DatabaseClient<DatabaseSchema> */
class XataClient extends DatabaseClient {
  constructor(options) {
    super({ ...defaultOptions, ...options }, tables);
  }
}
exports.XataClient = XataClient;
let instance = undefined;
/** @type { () => XataClient } */
const getXataClient = () => {
  if (instance) return instance;
  instance = new XataClient();
  return instance;
};
exports.getXataClient = getXataClient;
"
`;

exports[`generate > should generate Deno code 1`] = `
"// Generated by Xata Codegen CODEGEN_VERSION. Please do not edit.
import { buildClient } from \\"npm:@xata.io/client@latest\\";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from \\"npm:@xata.io/client@latest\\";

const tables = [
  { name: \\"users\\", columns: [{ name: \\"name\\", type: \\"string\\" }] },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes[\\"users\\"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: \\"https://workspace-1234.xata.sh/db/dbname\\",
  branch: \\"feature-branch\\",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
"
`;

exports[`generate > should ignore CJS for TS code 1`] = `
"// Generated by Xata Codegen CODEGEN_VERSION. Please do not edit.
import { buildClient } from \\"@xata.io/client\\";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from \\"@xata.io/client\\";

const tables = [
  { name: \\"users\\", columns: [{ name: \\"name\\", type: \\"string\\" }] },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes[\\"users\\"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: \\"https://workspace-1234.xata.sh/db/dbname\\",
  branch: \\"feature-branch\\",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
"
`;

exports[`generate > should inject branch if passed 1`] = `
"// Generated by Xata Codegen CODEGEN_VERSION. Please do not edit.
import { buildClient } from \\"@xata.io/client\\";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from \\"@xata.io/client\\";

const tables = [
  { name: \\"users\\", columns: [{ name: \\"name\\", type: \\"string\\" }] },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes[\\"users\\"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: \\"https://workspace-1234.xata.sh/db/dbname\\",
  branch: \\"feature-branch\\",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
"
`;

exports[`generate > should respect case naming 1`] = `
"// Generated by Xata Codegen CODEGEN_VERSION. Please do not edit.
import { buildClient } from \\"@xata.io/client\\";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from \\"@xata.io/client\\";

const tables = [
  {
    name: \\"teams_Like\\",
    columns: [
      { name: \\"name-test\\", type: \\"string\\" },
      { name: \\"labels_Test\\", type: \\"multiple\\" },
      { name: \\"ownerFoo\\", type: \\"link\\", link: { table: \\"users-foo\\" } },
    ],
  },
  {
    name: \\"users-foo\\",
    columns: [
      { name: \\"email-random\\", type: \\"email\\" },
      { name: \\"full_name\\", type: \\"string\\" },
      { name: \\"teamLike\\", type: \\"link\\", link: { table: \\"teams_Like\\" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type TeamsLike = InferredTypes[\\"teams_Like\\"];
export type TeamsLikeRecord = TeamsLike & XataRecord;

export type UsersFoo = InferredTypes[\\"users-foo\\"];
export type UsersFooRecord = UsersFoo & XataRecord;

export type DatabaseSchema = {
  teams_Like: TeamsLikeRecord;
  \\"users-foo\\": UsersFooRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: \\"https://workspace-1234.xata.sh/db/dbname\\",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
"
`;

exports[`generate > should respect numbers in names 1`] = `
"// Generated by Xata Codegen CODEGEN_VERSION. Please do not edit.
import { buildClient } from \\"@xata.io/client\\";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from \\"@xata.io/client\\";

const tables = [
  {
    name: \\"1teams-case\\",
    columns: [
      { name: \\"2nameCase\\", type: \\"string\\" },
      { name: \\"3Labels\\", type: \\"multiple\\" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type $1teamsCase = InferredTypes[\\"1teams-case\\"];
export type $1teamsCaseRecord = $1teamsCase & XataRecord;

export type DatabaseSchema = {
  \\"1teams-case\\": $1teamsCaseRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: \\"https://workspace-1234.xata.sh/db/dbname\\",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
"
`;

exports[`generate > should respect numbers in names 2`] = `
"// Generated by Xata Codegen CODEGEN_VERSION. Please do not edit.
import { buildClient } from \\"@xata.io/client\\";
const tables = [
  {
    name: \\"1teams-case\\",
    columns: [
      { name: \\"2nameCase\\", type: \\"string\\" },
      { name: \\"3Labels\\", type: \\"multiple\\" },
    ],
  },
];
const DatabaseClient = buildClient();
const defaultOptions = {
  databaseURL: \\"https://workspace-1234.xata.sh/db/dbname\\",
};
export class XataClient extends DatabaseClient {
  constructor(options) {
    super({ ...defaultOptions, ...options }, tables);
  }
}
let instance = undefined;
export const getXataClient = () => {
  if (instance) return instance;
  instance = new XataClient();
  return instance;
};
"
`;

exports[`generate > should respect numbers in names 3`] = `
"import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from \\"@xata.io/client\\";
declare const tables: readonly [
  {
    readonly name: \\"1teams-case\\";
    readonly columns: readonly [
      {
        readonly name: \\"2nameCase\\";
        readonly type: \\"string\\";
      },
      {
        readonly name: \\"3Labels\\";
        readonly type: \\"multiple\\";
      }
    ];
  }
];
export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;
export type $1teamsCase = InferredTypes[\\"1teams-case\\"];
export type $1teamsCaseRecord = $1teamsCase & XataRecord;
export type DatabaseSchema = {
  \\"1teams-case\\": $1teamsCaseRecord;
};
declare const DatabaseClient: any;
export declare class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions);
}
export declare const getXataClient: () => XataClient;
export {};
"
`;
