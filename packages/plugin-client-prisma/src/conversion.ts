import { type ColumnType, ColumnTypeEnum } from '@prisma/driver-adapter-utils';

export function fieldToColumnType(fieldType: string): ColumnType {
  switch (fieldType) {
    case 'bool':
      return ColumnTypeEnum.Boolean;
    case 'bytea':
      return ColumnTypeEnum.Bytes;
    case 'char':
      return ColumnTypeEnum.Text;
    case 'int8':
      return ColumnTypeEnum.Int64;
    case 'int2':
      return ColumnTypeEnum.Int32;
    case 'int4':
      return ColumnTypeEnum.Int32;
    case 'regproc':
      return ColumnTypeEnum.Text;
    case 'text':
      return ColumnTypeEnum.Text;
    case 'oid':
      return ColumnTypeEnum.Int64;
    case 'tid':
      return ColumnTypeEnum.Text;
    case 'xid':
      return ColumnTypeEnum.Text;
    case 'cid':
      return ColumnTypeEnum.Text;
    case 'json':
      return ColumnTypeEnum.Json;
    case 'xml':
      return ColumnTypeEnum.Text;
    case 'pg_node_tree':
      return ColumnTypeEnum.Text;
    case 'smgr':
      return ColumnTypeEnum.Text;
    case 'path':
      return ColumnTypeEnum.Text;
    case 'polygon':
      return ColumnTypeEnum.Text;
    case 'cidr':
      return ColumnTypeEnum.Text;
    case 'float4':
      return ColumnTypeEnum.Float;
    case 'float8':
      return ColumnTypeEnum.Double;
    case 'abstime':
      return ColumnTypeEnum.Text;
    case 'reltime':
      return ColumnTypeEnum.Text;
    case 'tinterval':
      return ColumnTypeEnum.Text;
    case 'circle':
      return ColumnTypeEnum.Text;
    case 'macaddr8':
      return ColumnTypeEnum.Text;
    case 'money':
      return ColumnTypeEnum.Numeric;
    case 'macaddr':
      return ColumnTypeEnum.Text;
    case 'inet':
      return ColumnTypeEnum.Text;
    case 'aclitem':
      return ColumnTypeEnum.Text;
    case 'bpchar':
      return ColumnTypeEnum.Text;
    case 'varchar':
      return ColumnTypeEnum.Text;
    case 'date':
      return ColumnTypeEnum.Date;
    case 'time':
      return ColumnTypeEnum.Time;
    case 'timestamp':
      return ColumnTypeEnum.DateTime;
    case 'timestamptz':
      return ColumnTypeEnum.DateTime;
    case 'interval':
      return ColumnTypeEnum.Text;
    case 'timetz':
      return ColumnTypeEnum.Time;
    case 'bit':
      return ColumnTypeEnum.Text;
    case 'varbit':
      return ColumnTypeEnum.Text;
    case 'numeric':
      return ColumnTypeEnum.Numeric;
    case 'refcursor':
      return ColumnTypeEnum.Text;
    case 'regprocedure':
      return ColumnTypeEnum.Text;
    case 'regoper':
      return ColumnTypeEnum.Text;
    case 'regoperator':
      return ColumnTypeEnum.Text;
    case 'regclass':
      return ColumnTypeEnum.Text;
    case 'regtype':
      return ColumnTypeEnum.Text;
    case 'uuid':
      return ColumnTypeEnum.Uuid;
    case 'txid_snapshot':
      return ColumnTypeEnum.Text;
    case 'pg_lsn':
      return ColumnTypeEnum.Text;
    case 'pg_ndistinct':
      return ColumnTypeEnum.Text;
    case 'pg_dependencies':
      return ColumnTypeEnum.Text;
    case 'tsvector':
      return ColumnTypeEnum.Text;
    case 'tsquery':
      return ColumnTypeEnum.Text;
    case 'gtsvector':
      return ColumnTypeEnum.Text;
    case 'regconfig':
      return ColumnTypeEnum.Text;
    case 'regdictionary':
      return ColumnTypeEnum.Text;
    case 'jsonb':
      return ColumnTypeEnum.Json;
    case 'regnamespace':
      return ColumnTypeEnum.Text;
    case 'regrole':
      return ColumnTypeEnum.Text;
    default:
      return ColumnTypeEnum.Text;
  }
}
